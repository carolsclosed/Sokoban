/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package APPS;

import PARTS.Player;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 *
 * @author Ângela Sebastião e Daniel Domingues com base do Professor António Manso
 */
public class GAME1 extends javax.swing.JFrame implements KeyListener {
   
    private int currentLevel; // level atual do jogo
    private final Player selectedPlayer; // o player selecionado pois existe mais do que um
    private boolean isHolding; // para saber se a tecla H está pressionada
    // utilizamos isto para puxar caixas

    /**
     * construtor
     * @param level
     * @param player 
     */
    public GAME1(int level, Player player) {

        // se não recebermos um player, criamos um;
        if (player == null) {
            player = new Player();
        }

        // iniciando configurações iniciais
        this.isHolding = false;
        this.selectedPlayer = player;
        this.currentLevel = level;
        initComponents();
        setVisible(true);
        addKeyListener((KeyListener) this);
        setFocusable(true);
        setSize(790, 850);
        setLocationRelativeTo(null);
        UNDO1.setFocusable(false);

    }

   
    
    /**
     * key listener para fazer o personagem mover-se
     * @param e 
     */
    
    public void keyPressed(KeyEvent e) {
        if (e.getKeyChar() == 'w' || e.getKeyChar() == 'W' || e.getExtendedKeyCode() == KeyEvent.VK_UP) {
            sokoban1.move(0, -1, this.isHolding);
        }
        if (e.getKeyChar() == 's' || e.getKeyChar() == 'S' || e.getExtendedKeyCode() == KeyEvent.VK_DOWN) {
            sokoban1.move(0, 1, this.isHolding);
        }
        if (e.getKeyChar() == 'd' || e.getKeyChar() == 'D' || e.getExtendedKeyCode() == KeyEvent.VK_RIGHT) {
            sokoban1.move(1, 0, this.isHolding);
        }
        if (e.getKeyChar() == 'a' || e.getKeyChar() == 'A' || e.getExtendedKeyCode() == KeyEvent.VK_LEFT) {
            sokoban1.move(-1, 0, this.isHolding);
        }
        if (e.getKeyChar() == 'h' || e.getKeyChar() == 'H') {
            // o H não faz o personagem mover pois é apenas para saber
            // se está a tentar segurar alguma caixa
            this.isHolding = true;
        }
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        prev = new javax.swing.JButton();
        sair = new javax.swing.JButton();
        UNDO1 = new javax.swing.JButton();
        sokoban1 = new PARTS.Sokoban(currentLevel,selectedPlayer);
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel2.setBackground(new java.awt.Color(102, 51, 0));
        jLabel2.setFont(new java.awt.Font("Felix Titling", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("H +  DIREÇÃO : PUXAR CAIXAS");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(60, 70, 220, 30);

        prev.setBackground(new java.awt.Color(102, 51, 0));
        prev.setFont(new java.awt.Font("Felix Titling", 0, 12)); // NOI18N
        prev.setForeground(new java.awt.Color(255, 255, 255));
        prev.setText("PREVIOUS LEVEL");
        prev.setBorderPainted(false);
        prev.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevActionPerformed(evt);
            }
        });
        getContentPane().add(prev);
        prev.setBounds(170, 20, 130, 50);

        sair.setBackground(new java.awt.Color(102, 51, 0));
        sair.setFont(new java.awt.Font("Felix Titling", 0, 12)); // NOI18N
        sair.setForeground(new java.awt.Color(255, 255, 255));
        sair.setText("RETURN MENU");
        sair.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sair.setBorderPainted(false);
        sair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        getContentPane().add(sair);
        sair.setBounds(30, 20, 130, 50);

        UNDO1.setBackground(new java.awt.Color(102, 51, 0));
        UNDO1.setFont(new java.awt.Font("Felix Titling", 0, 12)); // NOI18N
        UNDO1.setForeground(new java.awt.Color(255, 255, 255));
        UNDO1.setText("RESTART LEVEL");
        UNDO1.setBorderPainted(false);
        UNDO1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        UNDO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UNDO1ActionPerformed(evt);
            }
        });
        getContentPane().add(UNDO1);
        UNDO1.setBounds(100, 100, 130, 50);
        getContentPane().add(sokoban1);
        sokoban1.setBounds(110, 320, 580, 470);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ASSETS/gifBACK.gif"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 801, 882);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * oltar ao nivel anterior
     * @param evt 
     */
    private void prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevActionPerformed
       
        this.currentLevel = this.currentLevel - 1;

        // se o nivel for menor que 0 vamos ignorar a ação do botao
        if (this.currentLevel < 0) {
            return;
        }
        // fechamos o atual GAME1 para iniciar um novo
        setVisible(false);

        // inicar novo GAME1 ao voltar ao nivel anterior
        // não precisamos por setVisible(true) pois já tem no construtor
        new GAME1(this.currentLevel, this.selectedPlayer);
    }//GEN-LAST:event_prevActionPerformed

    // ir para o menu
    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        setVisible(false);
        new menu().setVisible(true);
    }//GEN-LAST:event_sairActionPerformed

    // reinciar o nivel
    private void UNDO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UNDO1ActionPerformed
        dispose();
        new GAME1(this.currentLevel,this.selectedPlayer).setVisible(true);    }//GEN-LAST:event_UNDO1ActionPerformed
    /**/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GAME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GAME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GAME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GAME1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Player player = new Player();
                new GAME1(0, player);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UNDO1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton prev;
    private javax.swing.JButton sair;
    private PARTS.Sokoban sokoban1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        // quando a tecla H for solta, quer dizer que deve se tornar falso
        if (e.getKeyChar() == 'h' || e.getKeyChar() == 'H') {
            this.isHolding = false;
        }
    }
}
